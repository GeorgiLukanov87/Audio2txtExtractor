#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import speech_recognition as sr
from pydub import AudioSegment
import json
from datetime import datetime
import glob
import math


class BulgarianAudioTranscriber:
    def __init__(self, audio_folder="audio_segments", output_folder="transcripts"):
        self.audio_folder = audio_folder
        self.output_folder = output_folder
        self.recognizer = sr.Recognizer()

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∏—Ç–µ –∑–∞ –∏–∑—Ö–æ–¥–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        # –ü–∞–ø–∫–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏
        self.segments_folder = os.path.join(output_folder, "generated_segments")
        if not os.path.exists(self.segments_folder):
            os.makedirs(self.segments_folder)

    def split_audio_file(self, input_file, segment_duration_minutes=3.07):
        """–†–∞–∑–±–∏–≤–∞ –≥–æ–ª—è–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏ –æ—Ç ~3:04 –º–∏–Ω—É—Ç–∏"""
        try:
            print(f"üî™ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª: {os.path.basename(input_file)}")
            audio = AudioSegment.from_file(input_file)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–∏–Ω—É—Ç–∏—Ç–µ –≤ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥–∏
            segment_duration_ms = segment_duration_minutes * 60 * 1000

            # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è —Å–µ–≥–º–µ–Ω—Ç–∏
            total_duration_ms = len(audio)
            total_segments = math.ceil(total_duration_ms / segment_duration_ms)

            print(f"üìä –û–±—â–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç: {total_duration_ms // 60000:.1f} –º–∏–Ω—É—Ç–∏")
            print(f"üìä –©–µ —Å–µ —Å—ä–∑–¥–∞–¥–∞—Ç {total_segments} —Å–µ–≥–º–µ–Ω—Ç–∞ –æ—Ç ~{segment_duration_minutes:.1f} –º–∏–Ω—É—Ç–∏")
            print(f"üîÑ –ó–∞–ø–æ—á–≤–∞ —Ä–∞–∑–±–∏–≤–∞–Ω–µ—Ç–æ...\n")

            segment_files = []

            for i in range(total_segments):
                # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–æ—Ç–æ –∏ –∫—Ä–∞—è –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
                start_ms = i * segment_duration_ms
                end_ms = min((i + 1) * segment_duration_ms, total_duration_ms)

                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
                segment = audio[start_ms:end_ms]

                # –ò–º–µ –Ω–∞ —Ñ–∞–π–ª–∞
                base_name = os.path.splitext(os.path.basename(input_file))[0]
                segment_filename = f"{base_name}_segment_{i + 1:03d}.wav"
                segment_path = os.path.join(self.segments_folder, segment_filename)

                # –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
                segment.export(segment_path, format="wav", parameters=["-ar", "16000", "-ac", "1"])
                segment_files.append(segment_path)

                # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
                actual_duration = (end_ms - start_ms) / 1000 / 60
                print(f"‚úì –°—ä–∑–¥–∞–¥–µ–Ω —Å–µ–≥–º–µ–Ω—Ç {i + 1}/{total_segments}: {segment_filename} ({actual_duration:.2f} –º–∏–Ω)")

            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ {len(segment_files)} —Å–µ–≥–º–µ–Ω—Ç–∞!")
            return segment_files

        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞: {e}")
            return []

    def convert_to_wav(self, input_file):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç –∑–∞ –ø–æ-–¥–æ–±—Ä–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ"""
        try:
            audio = AudioSegment.from_file(input_file)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –≤ 16kHz mono WAV –∑–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ
            audio = audio.set_frame_rate(16000).set_channels(1)

            wav_file = input_file.rsplit('.', 1)[0] + '_converted.wav'
            audio.export(wav_file, format="wav")
            return wav_file
        except Exception as e:
            print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ {input_file}: {e}")
            return None

    def transcribe_audio_segment(self, audio_file, segment_number):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–∞ –µ–¥–∏–Ω –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫ - –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞ –ø—Ä–∏ –≥—Ä–µ—à–∫–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –≤ WAV –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if not audio_file.lower().endswith('.wav'):
                wav_file = self.convert_to_wav(audio_file)
                if not wav_file:
                    print(f"‚ö† –°–µ–≥–º–µ–Ω—Ç {segment_number}: –ü—Ä–æ–ø—É—Å–Ω–∞—Ç - –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ")
                    return ""  # –í—Ä—ä—â–∞ –ø—Ä–∞–∑–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ None
            else:
                wav_file = audio_file

            # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            with sr.AudioFile(wav_file) as source:
                # –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Ñ–æ–Ω–æ–≤ —à—É–º (–Ω–∞–º–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –ø–æ-–±—ä—Ä–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞)
                self.recognizer.adjust_for_ambient_noise(source, duration=0.2)
                audio_data = self.recognizer.record(source)

            # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ —Å Google Speech Recognition (–ø–æ–¥–¥—ä—Ä–∂–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏)
            try:
                text = self.recognizer.recognize_google(
                    audio_data,
                    language='bg-BG'  # –ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫
                )
                print(f"‚úì –°–µ–≥–º–µ–Ω—Ç {segment_number}: –£—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–∞–Ω ({len(text.split())} –¥—É–º–∏)")
                return text

            except sr.UnknownValueError:
                print(f"‚ö† –°–µ–≥–º–µ–Ω—Ç {segment_number}: –ü—Ä–æ–ø—É—Å–Ω–∞—Ç - –Ω—è–º–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–µ–º–∞ —Ä–µ—á")
                return ""  # –ü—Ä–∞–∑–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –º–∞—Ä–∫–µ—Ä

            except sr.RequestError as e:
                print(f"‚ö† –°–µ–≥–º–µ–Ω—Ç {segment_number}: –ü—Ä–æ–ø—É—Å–Ω–∞—Ç - –≥—Ä–µ—à–∫–∞ –≤ —É—Å–ª—É–≥–∞—Ç–∞")
                return ""  # –ü—Ä–∞–∑–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –º–∞—Ä–∫–µ—Ä

        except Exception as e:
            print(f"‚ö† –°–µ–≥–º–µ–Ω—Ç {segment_number}: –ü—Ä–æ–ø—É—Å–Ω–∞—Ç - {str(e)[:50]}...")
            return ""  # –í—Ä—ä—â–∞ –ø—Ä–∞–∑–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—Å—è–∫–∞–∫–≤–∞ –≥—Ä–µ—à–∫–∞

        finally:
            # –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏—è WAV —Ñ–∞–π–ª
            try:
                if 'wav_file' in locals() and wav_file != audio_file and os.path.exists(wav_file):
                    os.remove(wav_file)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä–∞ –≥—Ä–µ—à–∫–∏ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ

    def process_large_file(self, input_file, segment_duration_minutes=3.07):
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ –≥–æ–ª—è–º –∞—É–¥–∏–æ —Ñ–∞–π–ª - —Ä–∞–∑–±–∏–≤–∞ –≥–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–∞"""
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥–æ–ª—è–º —Ñ–∞–π–ª: {os.path.basename(input_file)}")

        # –†–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏
        segment_files = self.split_audio_file(input_file, segment_duration_minutes)

        if not segment_files:
            print("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞")
            return

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–∞–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏—Ç–µ
        print(f"\nüéØ –ó–∞–ø–æ—á–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –Ω–∞ {len(segment_files)} —Å–µ–≥–º–µ–Ω—Ç–∞...\n")

        transcripts = []
        full_text = []

        for i, segment_file in enumerate(segment_files, 1):
            print(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç {i}/{len(segment_files)}: {os.path.basename(segment_file)}")

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
            text = self.transcribe_audio_segment(segment_file, i)

            # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            segment_data = {
                "segment": i,
                "file": os.path.basename(segment_file),
                "original_file": os.path.basename(input_file),
                "text": text
            }

            transcripts.append(segment_data)

            # –î–æ–±–∞–≤—è–Ω–µ –∫—ä–º –ø—ä–ª–Ω–∏—è —Ç–µ–∫—Å—Ç (—Å–∞–º–æ –∞–∫–æ –∏–º–∞ —Ç–µ–∫—Å—Ç)
            if text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∞–ª–µ–Ω —Ç–µ–∫—Å—Ç
                full_text.append(text)

            print(f"üí¨ –¢–µ–∫—Å—Ç: {text if text else '[–ü—Ä–æ–ø—É—Å–Ω–∞—Ç —Å–µ–≥–º–µ–Ω—Ç]'}\n")

        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        self.save_results(transcripts, full_text, os.path.basename(input_file))

        # –ó–∞–ø–∏—Ç–≤–∞–Ω–µ –¥–∞–ª–∏ –¥–∞ —Å–µ –∏–∑—Ç—Ä–∏—è—Ç –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏
        self.cleanup_segments(segment_files)

    def process_segments_folder(self):
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ –≥–æ—Ç–æ–≤–∏ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∏ –≤ –ø–∞–ø–∫–∞—Ç–∞"""

        # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤–µ
        audio_extensions = ['*.mp3', '*.wav', '*.m4a', '*.flac', '*.aac', '*.ogg']
        audio_files = []

        for extension in audio_extensions:
            audio_files.extend(glob.glob(os.path.join(self.audio_folder, extension)))

        if not audio_files:
            print(f"‚ùå –ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤–µ –≤ –ø–∞–ø–∫–∞ '{self.audio_folder}'")
            return

        # –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –ø–æ –∏–º–µ
        audio_files.sort()

        print(f"üìÅ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print("üéØ –ó–∞–ø–æ—á–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫...\n")

        transcripts = []
        full_text = []

        for i, audio_file in enumerate(audio_files, 1):
            print(f"üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–π–ª {i}/{len(audio_files)}: {os.path.basename(audio_file)}")

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
            text = self.transcribe_audio_segment(audio_file, i)

            # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            segment_data = {
                "segment": i,
                "file": os.path.basename(audio_file),
                "text": text
            }

            transcripts.append(segment_data)

            # –î–æ–±–∞–≤—è–Ω–µ –∫—ä–º –ø—ä–ª–Ω–∏—è —Ç–µ–∫—Å—Ç (—Å–∞–º–æ –∞–∫–æ –∏–º–∞ —Ç–µ–∫—Å—Ç)
            if text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∞–ª–µ–Ω —Ç–µ–∫—Å—Ç
                full_text.append(text)

            print(f"üí¨ –¢–µ–∫—Å—Ç: {text if text else '[–ü—Ä–æ–ø—É—Å–Ω–∞—Ç —Å–µ–≥–º–µ–Ω—Ç]'}\n")

        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        self.save_results(transcripts, full_text)

    def cleanup_segments(self, segment_files):
        """–ü–∏—Ç–∞ –¥–∞–ª–∏ –¥–∞ —Å–µ –∏–∑—Ç—Ä–∏—è—Ç –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏"""
        try:
            response = input(f"\nüóëÔ∏è –î–∞ —Å–µ –∏–∑—Ç—Ä–∏—è—Ç {len(segment_files)} –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–µ–≥–º–µ–Ω—Ç–∞? (y/N): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞']:
                for segment_file in segment_files:
                    if os.path.exists(segment_file):
                        os.remove(segment_file)
                print("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏ —Å–∞ –∏–∑—Ç—Ä–∏—Ç–∏")

                # –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∞—Ç–∞ –∞–∫–æ –µ –ø—Ä–∞–∑–Ω–∞
                try:
                    os.rmdir(self.segments_folder)
                    print("‚úÖ –ü–∞–ø–∫–∞—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏ –µ –∏–∑—Ç—Ä–∏—Ç–∞")
                except:
                    pass
            else:
                print(f"üìÅ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –≤: {self.segments_folder}")
        except:
            print(f"üìÅ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –≤: {self.segments_folder}")

    def save_results(self, transcripts, full_text, original_filename=None):
        """–ó–∞–ø–∞–∑–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∏–º–µ—Ç–æ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ñ–∞–π–ª –≤ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
        file_prefix = f"{os.path.splitext(original_filename)[0]}_" if original_filename else ""

        # 1. JSON —Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        json_file = os.path.join(self.output_folder, f"{file_prefix}transcripts_{timestamp}.json")
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(transcripts, f, ensure_ascii=False, indent=2)

        # 2. –§–∞–π–ª —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∏
        segments_file = os.path.join(self.output_folder, f"{file_prefix}segments_text_{timestamp}.txt")
        with open(segments_file, 'w', encoding='utf-8') as f:
            f.write("–ò–ó–í–õ–ï–ß–ï–ù –¢–ï–ö–°–¢ –ü–û –°–ï–ì–ú–ï–ù–¢–ò\n")
            f.write("=" * 40 + "\n")
            if original_filename:
                f.write(f"–û—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω —Ñ–∞–π–ª: {original_filename}\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            for t in transcripts:
                f.write(f"–°–µ–≥–º–µ–Ω—Ç {t['segment']} ({t['file']}):\n")
                f.write(f"{t['text']}\n\n")

        # 3. –ü—ä–ª–Ω–∏—è—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ç–æ –µ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        full_text_file = os.path.join(self.output_folder, f"{file_prefix}full_text_{timestamp}.txt")
        with open(full_text_file, 'w', encoding='utf-8') as f:
            f.write("–ü–™–õ–ï–ù –ò–ó–í–õ–ï–ß–ï–ù –¢–ï–ö–°–¢\n")
            f.write("=" * 30 + "\n")
            if original_filename:
                f.write(f"–û—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω —Ñ–∞–π–ª: {original_filename}\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
            combined_text = " ".join(full_text)
            f.write(combined_text)

        print("‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–æ! –°—ä–∑–¥–∞–¥–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:")
        print(f"üìÑ JSON –¥–∞–Ω–Ω–∏: {json_file}")
        print(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∏: {segments_file}")
        print(f"üìÑ –ü—ä–ª–µ–Ω —Ç–µ–∫—Å—Ç: {full_text_file}")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –û–±—â–æ —Å–µ–≥–º–µ–Ω—Ç–∏: {len(transcripts)}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–∞–Ω–∏: {len(full_text)}")
        print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å–Ω–∞—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∏: {len(transcripts) - len(full_text)}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö: {len(full_text) / len(transcripts) * 100:.1f}%")
        print(f"   ‚Ä¢ –û–±—â–æ –¥—É–º–∏: {len(' '.join(full_text).split())}")


def main():
    print("üéôÔ∏è –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç –æ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤–µ (–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫)")
    print("=" * 58)

    # –ò–∑–±–æ—Ä –Ω–∞ —Ä–µ–∂–∏–º –Ω–∞ —Ä–∞–±–æ—Ç–∞
    print("\nüìã –†–µ–∂–∏–º–∏ –Ω–∞ —Ä–∞–±–æ—Ç–∞:")
    print("1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–∏ —Å–µ–≥–º–µ–Ω—Ç–∏ –≤ –ø–∞–ø–∫–∞")
    print("2. –†–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ –≥–æ–ª—è–º —Ñ–∞–π–ª –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")

    mode = input("\nüî¢ –ò–∑–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º (1 –∏–ª–∏ 2): ").strip()

    if mode == "2":
        # –†–µ–∂–∏–º –∑–∞ –≥–æ–ª—è–º —Ñ–∞–π–ª
        input_file = input("üìÅ –ü—ä—Ç –¥–æ –≥–æ–ª–µ–º–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª: ").strip()

        if not os.path.exists(input_file):
            print("‚ùå –§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!")
            return

        segment_duration = input("‚è±Ô∏è –ü—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç –≤ –º–∏–Ω—É—Ç–∏ (Enter –∑–∞ 3.07): ").strip()
        if not segment_duration:
            segment_duration = 3.07
        else:
            segment_duration = float(segment_duration)

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞
        transcriber = BulgarianAudioTranscriber()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥–æ–ª–µ–º–∏—è —Ñ–∞–π–ª
        transcriber.process_large_file(input_file, segment_duration)

    else:
        # –†–µ–∂–∏–º –∑–∞ –≥–æ—Ç–æ–≤–∏ —Å–µ–≥–º–µ–Ω—Ç–∏
        audio_folder = input("üìÅ –ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∏ (Enter –∑–∞ 'audio_segments'): ").strip()
        if not audio_folder:
            audio_folder = "audio_segments"

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞
        transcriber = BulgarianAudioTranscriber(audio_folder)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏
        transcriber.process_segments_folder()


if __name__ == "__main__":
    main()
